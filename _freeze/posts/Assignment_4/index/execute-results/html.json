{
  "hash": "84b90d4017b0cd73a8ea53487ff1fe9b",
  "result": {
    "markdown": "---\ntitle: \"BCB521-Assignment_4\"\nauthor: \"Zoë Wilson\"\nformat: html\neditor: source\n---\n\n\n## Project Summary\n\nThis project aims to examine how bacteriophage could be used to combat diseases in honeybees. One deadly pathogen that threatens the honeybee is European Foulbrood (EFB), which is caused by the bacteria *Melissococcus plutonius*. *M. plutonius* can devastate hives by killing off larvae, and has no \"cure\". Our lab has sequenced 6 different isolates of *M. plutonius* obtained from an apiary in Minnesota. These isolates were analyzed to identify regions of the genome that may be a prophage, a bacteriophage integrated into the host genome. Some prophage may actually be temperate phage, which can be induced to enter the lytic cycle, thereby infecting and killing bacteria. If we can identify prophage, we can then attempt to induce temperate phage. The identification and obtainment of bacteriophage that can infect *M. plutonius* will allow us to pursue an avenue to support honeybee health without the use of antibiotics. Currently, no bacteriophage have been isolate and identified for *M. plutonius*. After our attempts to induce temperate phage, we will also examine environmental samples taken from the apiary for the presence of any bacteriophage which may infect *M. plutonius*.\n  \n  \n### Project Goals\n\n1.  Identify prophage in *M. plutonius* genome\n2.  Induce temperate phage from *M. plutonius* genome\n3.  Find bacteriophage in environmental samples\n  \n  \n## Script Summary\n\nThis script is designed to examine the number of prophage identified in various *M. plutonius* isolates genomes and plot the data for visualization.\n  \n  \n### Packages\n  \nThis code chunk will install and load packages necessary for this script.  \n  \n  \n\n::: {.cell}\n\n```{.r .cell-code}\n#This if statement will install the tidyverse package\n#If it is not already available when trying to load\nif (!require(\"tidyverse\")){\n  #Install tidyverse package if not found in next command\n  install.packages(\"tidyverse\")\n  #Load tidyverse package\n  library(tidyverse)\n  }\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: tidyverse\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n#Confirm version of tidyverse that is loaded\n#This script was originally completed with tidyverse version 2.0.0\npackageVersion(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] '2.0.0'\n```\n:::\n\n```{.r .cell-code}\n#This if statement will install the ggpubr package\n#If it is not already available when trying to load\nif (!require(\"ggpubr\")){\n  #Install ggpubr package if not found in next command\n  install.packages(\"ggpubr\")\n  #Load ggpubr package\n  library(ggpubr)\n  }\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: ggpubr\n```\n:::\n\n```{.r .cell-code}\n#Confirm version of tidyverse that is loaded\n#This script was originally completed with tidyverse version 0.6.0\npackageVersion(\"ggpubr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] '0.6.0'\n```\n:::\n:::\n\n  \n  \n### Data\n  \nThis code chunk will load in a data frame containing information on the isolates\n\n  \n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- read.csv(\"Isolate Information.csv\")\nhead(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   Isolate Clonal_Complex Sequence_Type     Type Number_Intact_Prophage\n1 Strain 1          CC-13          ST-1  Typical                      1\n2 Strain 2           CC-3          ST-3  Typical                      1\n3 Strain 3           CC-3          ST-3  Typical                      1\n4 Strain 4          CC-12         ST-12 Atypical                      5\n5 Strain 5          CC-12         ST-19 Atypical                      3\n6 Strain 6           CC-3         ST-39  Typical                      3\n  Assumed_Virulency\n1         Avirulent\n2 Somewhat Virulent\n3 Somewhat Virulent\n4          Virulent\n5          Virulent\n6 Somewhat Virulent\n```\n:::\n\n```{.r .cell-code}\nstr(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t6 obs. of  6 variables:\n $ Isolate               : chr  \"Strain 1\" \"Strain 2\" \"Strain 3\" \"Strain 4\" ...\n $ Clonal_Complex        : chr  \"CC-13\" \"CC-3\" \"CC-3\" \"CC-12\" ...\n $ Sequence_Type         : chr  \"ST-1\" \"ST-3\" \"ST-3\" \"ST-12\" ...\n $ Type                  : chr  \"Typical\" \"Typical\" \"Typical\" \"Atypical\" ...\n $ Number_Intact_Prophage: int  1 1 1 5 3 3\n $ Assumed_Virulency     : chr  \"Avirulent\" \"Somewhat Virulent\" \"Somewhat Virulent\" \"Virulent\" ...\n```\n:::\n:::\n\n\n### Data Exploration\n  \nThe following code chunks will play around with the data and create some plots to examine the prophage identified in the 6 *M. plutonius* isolates. The goal is to see if there are any interesting patterns in the data to follow up on.  \n\n  \n#### Number of Prophage by Isolate\n  \nFirst, let's plot the number of prophage for each isolate. We sequenced 6 isolates of *M. plutonius*. The name of each of the 6 *M. plutonius* isolates can be found in the column \"Isolate\", and the number of prophage can be found in the column \"Number_Intact_Prophage\".\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n#Create a plot using the dataframe with isolate information\n#Isolates on x axis\n(plot_iso <- ggplot(df,aes(x=Isolate,\n                           #Number of prophage on y axis\n                           y=Number_Intact_Prophage))+\n   #Fill columns with a color so it's not boring\n  geom_col(fill=\"goldenrod\")+\n   #Make nice legible axis titles\n   #italicize bacteria name\n  labs(x=expression(paste(italic(\"M. plutonius\"), \" Isolate\")),\n       y=\"Number of Potential Prophage\")+\n   #Adjust themes for legibility\n   #Increases axis title and text size\n  theme(axis.title=element_text(size=20),\n        axis.text=element_text(size=15),\n        #Remove gridlines and color from figure background\n        panel.background=element_blank(),\n        #Make axis lines black\n        axis.line = element_line(colour = \"black\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_iso-1.png){width=672}\n:::\n:::\n\n  \n  \n#### Number of Prophage by Sequence Type\n  \n*M. plutonius* strains are classified by sequence type, which groups the bacteria by a handful of alleles in specific genes. Specifically, sequence type is determined by the allelic profile of 4 genes. The Sequence Type (ST) of the 6 *M. plutonius* isolates can be found in the column \"Sequnce_Type\"\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n#Create a plot using the dataframe with isolate information\n\n(plot_ST <- df  %>%\n   #summarize average number of prophage by sequence type\n   reframe(avg=mean(Number_Intact_Prophage),.by=Sequence_Type)%>%\n   #ST on x axis\n   ggplot(aes(x=Sequence_Type,\n              #Number of prophage on y axis\n              y=avg,\n              #Colored by the sequence type of strain\n              fill=Sequence_Type))+\n  #Create columns with the number of prophage\n  geom_col()+\n  #Adjust labels for legibility\n  labs(y=\"Number of Potential Prophage\",\n       x=\"Sequence Type\")+\n  #Adjust themes for legibility\n  #Increase axis and legend title and text fonts\n  theme(axis.title=element_text(size=20),\n        axis.text=element_text(size=15),\n        #do not include legend\n        legend.position=\"none\",\n        #Remove gridlines and color from figure background\n        panel.background=element_blank(),\n        #Make axis lines black\n        axis.line = element_line(colour = \"black\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_ST-1.png){width=672}\n:::\n:::\n\n  \n  \n#### Number of Prophage by Clonal Complex\n  \n*M. plutonius* strains can be classified by clonal complex, which groups the bacteria by highly related genomes and have the same or very similar sequence type. The clonal complex (CC) of the 6 *M. plutonius* isolates can be found in the column \"Clonal_Complex\".\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Create a plot using the dataframe with isolate information\n\n(plot_CC <- df  %>%\n   #summarize average number of prophage by clonal complex\n   reframe(avg=mean(Number_Intact_Prophage),.by=Clonal_Complex)%>%\n   #clonal on x axis\n   ggplot(aes(x=Clonal_Complex,\n              #Number of prophage on y axis\n              y=avg,\n              #Colored by the CC of strain\n              fill=Clonal_Complex))+\n  #Create columns with the number of prophage\n  geom_col()+\n  #Adjust labels for legibility\n  labs(x=\"Clonal Complex\",\n       y=\"Average Number of Potential Prophage\")+\n  #Adjust themes for legibility\n  #Increase axis and legend title and text fonts\n  theme(axis.title=element_text(size=20),\n        axis.text=element_text(size=15),\n        #Do not include a legend\n        legend.position=\"none\",\n        #Remove gridlines and color from figure background\n        panel.background=element_blank(),\n        #Make axis lines black\n        axis.line = element_line(colour = \"black\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_CC-1.png){width=672}\n:::\n:::\n\n  \n  \n#### Number of Prophage by Strain Type\n  \nThe clonal complex can also indicate the type of attributes a strain may exhibit. *M. plutonius* can be classified by strain type, which groups the bacteria by either typical or atypical attributes. The strain type of the 6 *M. plutonius* isolates can be found in the column \"Type\"\n  \n\n::: {.cell}\n\n```{.r .cell-code}\n#Create a plot using the dataframe with isolate information\n#Isolates on x axis\n(plot_type <- df  %>%\n   #summarize average number of prophage by clonal complex\n   reframe(avg=mean(Number_Intact_Prophage),.by=Type)%>%\n   #Strain_Type\n   ggplot(aes(x=Type,\n              #Number of prophage on y axis\n              y=avg,\n              #Colored by the type of strain\n              fill=Type))+\n  #Create columns with the number of prophage\n  geom_col()+\n  #Adjust labels for legibility\n  labs(x=\"Strain Type\",\n       y=\"Average Number of Potential Prophage\")+\n  #Adjust themes for legibility\n  #Increase axis and legend title and text fonts\n  theme(axis.title=element_text(size=20),\n        axis.text=element_text(size=15),\n        #Do not include a legend\n        legend.position=\"none\",\n        #Remove gridlines and color from figure background\n        panel.background=element_blank(),\n        #Make axis lines black\n        axis.line = element_line(colour = \"black\")))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_Type-1.png){width=672}\n:::\n:::\n\n  \n### Summarize Data Exploration\n  \nThis code chunk will compile the plots created above into one many paneled plot for further examination and comparison\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#arrange the 4 plots into one plot\nggarrange(plot_iso,\n          plot_CC,\n          plot_ST,\n          plot_type,\n          #Add alphabet labels to each plot\n          labels=\"AUTO\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot_compile-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#Save plot as a png\nggsave(\"compiled_plots.png\",width=15,height=13)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}